@model ProjectsViewModel
@using WebApp.Models
@{
  ViewData["Title"] = "Projects";
}

<div class="title-div flex">
  <h2>
    @ViewData["Title"]
  </h2>
  <button class="btn btn-blue" data-toggle="add-overlay">
    <i class="fa-regular fa-plus"></i>
    Add Project
  </button>
</div>

<div class="nav-main flex">
  <a href="@Url.Action("Projects", "Projects", new { filter = "all" })">
    <span class="@(string.IsNullOrEmpty(Context.Request.Query["filter"]) || Context.Request.Query["filter"] == "all" ? "active" : "")">ALL [@Model.AllCount]</span>
  </a>
  <a href="@Url.Action("Projects", "Projects", new { filter = "started" })">
    <span class="@(Context.Request.Query["filter"] == "started" ? "active" : "")">STARTED [@Model.StartedCount]</span>
  </a>
  <a href="@Url.Action("Projects", "Projects", new { filter = "completed" })">
    <span class="@(Context.Request.Query["filter"] == "completed" ? "active" : "")">COMPLETED [@Model.CompletedCount]</span>
  </a>
</div>

<div class="horizontal-divider"></div>

<div class="project-container">
  @foreach(var project in Model.Projects)
  {
    if (project != null)
    {
      @await Html.PartialAsync("Partials/Components/_ProjectCard", project)
    }
  }
</div>

@if ((string?)ViewData["ShowEditForm"] == "true")
{
  @await Html.PartialAsync("Partials/Components/_EditProjectForm", Model.EditProjectViewModel)
}
else
{
  @await Html.PartialAsync("Partials/Components/_AddProjectForm", Model.AddProjectViewModel)
}