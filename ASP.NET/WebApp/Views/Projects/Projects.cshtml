@model ProjectsViewModel
@using WebApp.Models
@{
  ViewData["Title"] = "Projects";
}

<div class="title-div flex">
  <h2>
    @ViewData["Title"]
  </h2>
  <button class="btn btn-blue" data-toggle="add-overlay">
    <i class="fa-regular fa-plus"></i>
    Add Project
  </button>
</div>

<div class="nav-main flex">
  <a href="#">
    <span>ALL [@Model.Projects.Count()]</span>
  </a>
  <a href="#">
    <span>STARTED [@Model.Projects.Count(p => p.Status?.StatusName == "Started")]</span>
  </a>
  <a href="#">
    <span>COMPLETED [@Model.Projects.Count(p => p.Status?.StatusName == "Completed")]</span>
  </a>
</div>

<div class="horizontal-divider"></div>

<div class="project-container">
  @foreach(var project in Model.Projects)
  {
    if (project != null)
    {
      @await Html.PartialAsync("Partials/Components/_ProjectCard", project)
    }
  }
</div>

@await Html.PartialAsync("Partials/Components/_AddProjectForm", Model.AddProjectViewModel)
@await Html.PartialAsync("Partials/Components/_EditProjectForm", Model.EditProjectViewModel)

@section Scripts {
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const shouldShowAdd = '@ViewData["ShowAddForm"]' === 'true';
      const shouldShowEdit = '@ViewData["ShowEditForm"]' === 'true';

      if (shouldShowAdd) {
        document.getElementById('add-overlay').classList.remove('hidden');
      }

      if (shouldShowEdit) {
        document.getElementById('edit-overlay').classList.remove('hidden');
      }
    });
  </script>
}